<?php
# This file was automatically generated by the MediaWiki 1.19.2
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename      = "<%= mediawiki_sitename %>";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "<%= mediawiki_scriptpath %>";
$wgScriptExtension  = ".php";

## The protocol and server name to use in fully-qualified URLs
$wgServer           = "<%= mediawiki_server %>";

## The relative URL path to the skins directory
$wgStylePath        = "$wgScriptPath/skins";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
<% if scope.lookupvar('::mediawiki_logo') %>
$wgLogo             = <%= mediawiki_logo %>;
<% else %>
$wgLogo             = "$wgStylePath/common/images/wiki.png";
<% end %>

<% if scope.lookupvar('::mediawiki_timezone') %>
date_default_timezone_set('<%= scope.lookupvar('::mediawiki_timezone') %>');
$wgLocaltimezone = "<%= scope.lookupvar('::mediawiki_timezone') %>";
<% end %>

<% if scope.lookupvar('::mediawiki_use_ajax') %>
$wgUseAjax = true;
<% end %>
<% if scope.lookupvar('::mediawiki_allow_user_js') %>
$wgAllowUserJs = true;
<% end %>

## UPO means: this is also a user preference option

$wgEnableEmail      = <%= mediawiki_enable_email %>;
$wgEnableUserEmail  = <%= mediawiki_enable_user_email %>; # UPO

$wgEmergencyContact = "<%= http_serveradmin %>";
$wgPasswordSender   = "<%= http_serveradmin %>";

$wgEnotifUserTalk      = <%= mediawiki_enotif_user_talk %>; # UPO
$wgEnotifWatchlist     = <%= mediawiki_enotif_watchlist %>; # UPO
$wgEmailAuthentication = <%= mediawiki_email_authentication %>;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "<%= mediawiki_db_server %>";
$wgDBname           = "<%= mediawiki_db_name %>";
$wgDBuser           = "<%= mediawiki_db_user %>";
$wgDBpassword       = "<%= mediawiki_db_password %>";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 5.0.
$wgDBmysql5 = false;

# rarely execute jobs
$wgJobRunRate = 0.1;

## Shared memory settings
$wgMainCacheType    = <%= mediawiki_main_cache_type %>;
$wgMemCachedPersistent = true;
<% if scope.lookupvar('::mediawiki_main_cache_type') == 'CACHE_MEMCACHED' %>
$wgMemCachedServers = array(
    '<%= mediawiki_cached_server %>'
);
<% else %>
$wgMemCachedServers = array();
<% end %>


## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads  = <%= mediawiki_enable_uploads %>;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons  = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
$wgCacheDirectory = "$IP/cache";
$wgEnableSidebarCache = true;
$wgUseLocalMessageCache = true;
$wgUseGzip = true;

# Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "de-ch";

$wgSecretKey = "a2c2ef5329a7442d2768f6aa04ddcf9f1363f45322977411bb0379394c4187cc";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "17f5d35e38e07829";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook', 'vector':
$wgDefaultSkin = "vector";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl  = "<%= mediawiki_rights_url %>";
$wgRightsText = "<%= mediawiki_rights_text %>";
$wgRightsIcon = "<%= mediawiki_rights_icon %>";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# Query string length limit for ResourceLoader. You should only set this if
# your web server has a query string length limit (then set it to that limit),
# or if you have suhosin.get.max_value_length set in php.ini (then set it to
# that value)
$wgResourceLoaderMaxQueryLength = -1;



# End of automatically generated settings.
# Add more configuration options below.


$wgShowExceptionDetails = <%= mediawiki_show_exception_details %>;

$wgEnableScaryTranscluding = <%= mediawiki_enable_scary_transcluding %>;

$wgRawHtml = <%= mediawiki_raw_html %>;
$wgAllowCopyUploads = <%= mediawiki_allow_copy_uploads %>;

<% if scope.lookupvar('::mediawiki_disable_unauthed_edits') %>
$wgGroupPermissions['*']['edit']            = false;
<% end %>
<% if scope.lookupvar('::mediawiki_disable_anon') %>
$wgGroupPermissions['*']['createaccount']   = false;
$wgGroupPermissions['*']['read']            = false;
$wgGroupPermissions['*']['edit']            = false;
<% end %>

<% mediawiki_file_extensions.each do |extension| %>
$wgFileExtensions[] = '<%= extension %>';
<% end %>
<% scope.lookupvar('::mediawiki_url_protocols').each do |protocol| %>
$wgUrlProtocols[] = '<%= protocol %>';
<% end %>

<% if scope.lookupvar('::mediawiki_remote_auth') %>
require_once('extensions/Auth_remoteuser.php');
$wgAuth = new Auth_remoteuser();
<% end %>

<% if scope.lookupvar('::mediawiki_ldap_auth') %>
require_once( "$IP/extensions/LdapAuthentication/LdapAuthentication.php" );
<% if scope.lookupvar('::mediawiki_ldap_autoauth') %>
require_once( "$IP/extensions/LdapAuthentication/LdapAutoAuthentication.php" );
<% end %>

$wgLDAPDomainNames = array(
    '<%= mediawiki_ldap_domain_name %>'
);
$wgLDAPServerNames = array(
    '<%= mediawiki_ldap_domain_name %>' => '<%= mediawiki_ldap_server_name %>'
);
$wgLDAPSearchStrings = array(
    '<%= mediawiki_ldap_domain_name %>' => '<%= mediawiki_ldap_search_string %>'
);
$wgLDAPEncryptionType = array(
    '<%= mediawiki_ldap_domain_name %>' => '<%= mediawiki_ldap_encryption_type %>'
);
<% if mediawiki_ldap_proxy_agent %>
$wgLDAPProxyAgent = array(
    '<%= mediawiki_ldap_domain_name %>' => '<%= mediawiki_ldap_proxy_agent %>'
);
$wgLDAPProxyAgentPassword = array(
    '<%= mediawiki_ldap_domain_name %>' => '<%= mediawiki_ldap_proxy_agent_password %>'
);
<% end %>

<% if mediawiki_ldap_autoauth %>
AutoAuthSetup();
<% end %>
$wgAuth = new LdapAuthenticationPlugin();
<% end %>

<% if scope.lookupvar('::mediawiki_wikieditor') %>
require_once("$IP/extensions/WikiEditor/WikiEditor.php");

# Enables use of WikiEditor by default but still allow users to disable it in preferences
$wgDefaultUserOptions['usebetatoolbar'] = 1;
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
 
# Displays the Preview and Changes tabs
$wgDefaultUserOptions['wikieditor-preview'] = 1;
 
# Displays the Publish and Cancel buttons on the top right side
$wgDefaultUserOptions['wikieditor-publish'] = 0;
 
# Displays a navigation column (summary) on the right side
$wgDefaultUserOptions['usenavigabletoc'] = 1;
<% end %>

<% if scope.lookupvar('::mediawiki_socialprofile') %>
require_once("$IP/extensions/SocialProfile/SocialProfile.php");
$wgUserBoard = true;
$wgUserProfileDisplay['friends'] = true;
$wgUserProfileDisplay['foes'] = true;
$wgUserProfileDisplay['board'] = true;
$wgUserProfileDisplay['stats'] = true;

require_once("$IP/extensions/SocialProfile/UserWelcome/UserWelcome.php");
<% end %>

<% if scope.lookupvar('::mediawiki_parserfunctions') %>
require_once( "$IP/extensions/ParserFunctions/ParserFunctions.php" );
<% end %>

<% if scope.lookupvar('::mediawiki_categorytree') %>
require_once("$IP/extensions/CategoryTree/CategoryTree.php");
$wgCategoryTreeCategoryPageMode = <%= scope.lookupvar('::mediawiki_categorytree_page_mode') %>;
$wgCategoryTreeSidebarRoot = '<%= scope.lookupvar('mediawiki_categorytree_sidebar_root') %>';
<% if scope.lookupvar('::mediawiki_categorytree_sidebar_mode') %>
$wgCategoryTreeSidebarOptions['mode'] = <%= scope.lookupvar('::mediawiki_categorytree_sidebar_mode') %>
<% end %>
$wgCategoryTreeForceHeaders = <%= scope.lookupvar('::mediawiki_categorytree_sidebar_force_headers') %>;
<% end %>

<% if scope.lookupvar('::mediawiki_fileprotocollinks') %>
require_once("$IP/extensions/FileProtocolLinks/FileProtocolLinks.php");
<% end %>

<% if scope.lookupvar('::mediawiki_deletebatch') %>
require_once("$IP/extensions/DeleteBatch/DeleteBatch.php");
$wgGroupPermissions['<%= scope.lookupvar('::mediawiki_deletebatch_perms') %>']['deletebatch'] = true;
<% end %>

<% if scope.lookupvar('::mediawiki_approvedrevs') %>
include_once( "$IP/extensions/ApprovedRevs/ApprovedRevs.php" );
$wgGroupPermissions['*']['viewlinktolatest'] = true;
$wgGroupPermissions['*']['approverevisions'] = false;
$wgGroupPermissions['bureaucrat']['approverevisions'] = true;
<% end %>

<% if scope.lookupvar('::mediawiki_headertabs') %>
include_once( "$IP/extensions/HeaderTabs/HeaderTabs.php" );
$htEditTabLink = false;
<% end %>

<% if scope.lookupvar('::mediawiki_semantic') %>
require_once( "$IP/extensions/SemanticBundle/SemanticBundle.php" );

include_once( "$IP/extensions/Validator/Validator.php" );
include_once( "$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php" );
enableSemantics( parse_url( $wgServer, PHP_URL_HOST ) );

# see SemanticBundleSettings.inc.php for docs and inspiration
include_once( "$IP/extensions/SemanticResultFormats/SemanticResultFormats.php" );
include_once( "$IP/extensions/SemanticForms/SemanticForms.php" );
include_once( "$IP/extensions/SemanticFormsInputs/SemanticFormsInputs.php" );
include_once( "$IP/extensions/SemanticCompoundQueries/SemanticCompoundQueries.php" );
include_once( "$IP/extensions/SemanticDrilldown/SemanticDrilldown.php" );
include_once( "$IP/extensions/Maps/Maps.php" );
include_once( "$IP/extensions/SemanticMaps/SemanticMaps.php" );
include_once( "$IP/extensions/SemanticInternalObjects/SemanticInternalObjects.php" );
include_once( "$IP/extensions/SemanticImageInput/SemanticImageInput.php" );
include_once( "$IP/extensions/Arrays/Arrays.php" );
include_once( "$IP/extensions/DataTransfer/DataTransfer.php" );
require_once( "$IP/extensions/ReplaceText/ReplaceText.php" );
<% if scope.lookupvar('::mediawiki_socialprofile') %>
require_once("$IP/extensions/SemanticSocialProfile/SemanticSocialProfile.php");
<% end %>

$smwgPageSpecialProperties[] = '_NEWP';
$smwgPageSpecialProperties[] = '_LEDT';
$smwgPageSpecialProperties[] = '_MDAT';
$sfgRenameEditTabs = true;
$sfg24HourTime = true;
<% end %>

<% if scope.lookupvar('::mediawiki_externaldata') %>
include_once( "$IP/extensions/ExternalData/ExternalData.php" );
<% scope.lookupvar('::mediawiki_externaldata_ldap_servers').each do |name,ldap| %>
$edgLDAPServer['<%= name %>'] = "<%= ldap['host'] %>";
$edgLDAPBaseDN['<%= name %>'] = "<%= ldap['basedn'] %>";
$edgLDAPUser['<%= name %>'] = "<%= ldap['username'] %>";
$edgLDAPPass['<%= name %>'] = "<%= ldap['password'] %>";
<% end %>

$wgShowSQLErrors= <%= scope.lookupvar('::mediawiki_externaldata_sql_showerrors') %>;
$edgCacheExpireTime = <%= scope.lookupvar('::mediawiki_externaldata_cache_expiry') %>;
<% scope.lookupvar('::mediawiki_externaldata_sql_servers').each do |name,sql| %>
$edgDBServer['<%= name %>'] = "<%= sql['host'] %>";
$edgDBServerType['<%= name %>'] = "<%= sql['type'] %>";
$edgDBName['<%= name %>'] = "<%= sql['schema'] %>";
$edgDBUser['<%= name %>'] = "<%= sql['username'] %>";
$edgDBPass['<%= name %>'] = "<%= sql['password'] %>";
<% end %>

<% end %>